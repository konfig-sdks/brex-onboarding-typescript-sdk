/* tslint:disable */
/* eslint-disable */
/*
Onboarding API


The onboarding API allows you to refer your customers and personal contacts to Brex.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Applicant } from '../models';
// @ts-ignore
import { ContactPreference } from '../models';
// @ts-ignore
import { CreateDocumentRequest } from '../models';
// @ts-ignore
import { CreateReferralRequest } from '../models';
// @ts-ignore
import { CreateReferralRequestBusiness } from '../models';
// @ts-ignore
import { Document } from '../models';
// @ts-ignore
import { DocumentType } from '../models';
// @ts-ignore
import { Referral } from '../models';
// @ts-ignore
import { ReferralPage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReferralsApi - axios parameter creator
 * @export
 */
export const ReferralsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This creates new referrals. The response will contain an identifier and a unique personalized link to an application flow. Many fields are optional and when they\'re provided they\'ll prefill the application flow for Brex.  You should handle and store these references securely as they contain sensitive information about the referral.
         * @summary Creates a referral
         * @param {CreateReferralRequest} createReferralRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewReferral: async (createReferralRequest: CreateReferralRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createReferralRequest' is not null or undefined
            assertParamExists('createNewReferral', 'createReferralRequest', createReferralRequest)
            const localVarPath = `/v1/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createReferralRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/referrals',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createReferralRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a referral object by ID if it exists.
         * @summary Gets a referral by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v1/referrals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/referrals/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns referrals created. *Note*: This doesn\'t include referrals that have expired. 
         * @summary List referrals
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/referrals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  The `uri` will be a presigned S3 URL allowing you to upload the referral doc securely. This URL can only be used for a `PUT` operation and expires 30 minutes after its creation. Once your upload is complete, we will use this to prefill the application.  Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this presigned S3 URL. We highly recommend using one of AWS SDKs if they\'re available for your language to upload these files. 
         * @summary Create a new document upload
         * @param {string} id 
         * @param {CreateDocumentRequest} createDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument: async (id: string, createDocumentRequest: CreateDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadDocument', 'id', id)
            // verify required parameter 'createDocumentRequest' is not null or undefined
            assertParamExists('uploadDocument', 'createDocumentRequest', createDocumentRequest)
            const localVarPath = `/v1/referrals/{id}/document_upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createDocumentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/referrals/{id}/document_upload',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createDocumentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralsApi - functional programming interface
 * @export
 */
export const ReferralsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferralsApiAxiosParamCreator(configuration)
    return {
        /**
         * This creates new referrals. The response will contain an identifier and a unique personalized link to an application flow. Many fields are optional and when they\'re provided they\'ll prefill the application flow for Brex.  You should handle and store these references securely as they contain sensitive information about the referral.
         * @summary Creates a referral
         * @param {ReferralsApiCreateNewReferralRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewReferral(requestParameters: ReferralsApiCreateNewReferralRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Referral>> {
            const createReferralRequest: CreateReferralRequest = {
                referral_code: requestParameters.referral_code,
                applicant: requestParameters.applicant,
                business: requestParameters.business,
                contact_preference: requestParameters.contact_preference
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewReferral(createReferralRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a referral object by ID if it exists.
         * @summary Gets a referral by ID
         * @param {ReferralsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ReferralsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Referral>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns referrals created. *Note*: This doesn\'t include referrals that have expired. 
         * @summary List referrals
         * @param {ReferralsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: ReferralsApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  The `uri` will be a presigned S3 URL allowing you to upload the referral doc securely. This URL can only be used for a `PUT` operation and expires 30 minutes after its creation. Once your upload is complete, we will use this to prefill the application.  Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this presigned S3 URL. We highly recommend using one of AWS SDKs if they\'re available for your language to upload these files. 
         * @summary Create a new document upload
         * @param {ReferralsApiUploadDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDocument(requestParameters: ReferralsApiUploadDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Document>> {
            const createDocumentRequest: CreateDocumentRequest = {
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDocument(requestParameters.id, createDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferralsApi - factory interface
 * @export
 */
export const ReferralsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferralsApiFp(configuration)
    return {
        /**
         * This creates new referrals. The response will contain an identifier and a unique personalized link to an application flow. Many fields are optional and when they\'re provided they\'ll prefill the application flow for Brex.  You should handle and store these references securely as they contain sensitive information about the referral.
         * @summary Creates a referral
         * @param {ReferralsApiCreateNewReferralRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewReferral(requestParameters: ReferralsApiCreateNewReferralRequest, options?: AxiosRequestConfig): AxiosPromise<Referral> {
            return localVarFp.createNewReferral(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a referral object by ID if it exists.
         * @summary Gets a referral by ID
         * @param {ReferralsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ReferralsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Referral> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns referrals created. *Note*: This doesn\'t include referrals that have expired. 
         * @summary List referrals
         * @param {ReferralsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: ReferralsApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReferralPage> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  The `uri` will be a presigned S3 URL allowing you to upload the referral doc securely. This URL can only be used for a `PUT` operation and expires 30 minutes after its creation. Once your upload is complete, we will use this to prefill the application.  Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this presigned S3 URL. We highly recommend using one of AWS SDKs if they\'re available for your language to upload these files. 
         * @summary Create a new document upload
         * @param {ReferralsApiUploadDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocument(requestParameters: ReferralsApiUploadDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<Document> {
            return localVarFp.uploadDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewReferral operation in ReferralsApi.
 * @export
 * @interface ReferralsApiCreateNewReferralRequest
 */
export type ReferralsApiCreateNewReferralRequest = {
    
} & CreateReferralRequest

/**
 * Request parameters for getById operation in ReferralsApi.
 * @export
 * @interface ReferralsApiGetByIdRequest
 */
export type ReferralsApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReferralsApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getList operation in ReferralsApi.
 * @export
 * @interface ReferralsApiGetListRequest
 */
export type ReferralsApiGetListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReferralsApiGetList
    */
    readonly cursor?: string
    
}

/**
 * Request parameters for uploadDocument operation in ReferralsApi.
 * @export
 * @interface ReferralsApiUploadDocumentRequest
 */
export type ReferralsApiUploadDocumentRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReferralsApiUploadDocument
    */
    readonly id: string
    
} & CreateDocumentRequest

/**
 * ReferralsApiGenerated - object-oriented interface
 * @export
 * @class ReferralsApiGenerated
 * @extends {BaseAPI}
 */
export class ReferralsApiGenerated extends BaseAPI {
    /**
     * This creates new referrals. The response will contain an identifier and a unique personalized link to an application flow. Many fields are optional and when they\'re provided they\'ll prefill the application flow for Brex.  You should handle and store these references securely as they contain sensitive information about the referral.
     * @summary Creates a referral
     * @param {ReferralsApiCreateNewReferralRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiGenerated
     */
    public createNewReferral(requestParameters: ReferralsApiCreateNewReferralRequest, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).createNewReferral(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a referral object by ID if it exists.
     * @summary Gets a referral by ID
     * @param {ReferralsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiGenerated
     */
    public getById(requestParameters: ReferralsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns referrals created. *Note*: This doesn\'t include referrals that have expired. 
     * @summary List referrals
     * @param {ReferralsApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiGenerated
     */
    public getList(requestParameters: ReferralsApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  The `uri` will be a presigned S3 URL allowing you to upload the referral doc securely. This URL can only be used for a `PUT` operation and expires 30 minutes after its creation. Once your upload is complete, we will use this to prefill the application.  Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this presigned S3 URL. We highly recommend using one of AWS SDKs if they\'re available for your language to upload these files. 
     * @summary Create a new document upload
     * @param {ReferralsApiUploadDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiGenerated
     */
    public uploadDocument(requestParameters: ReferralsApiUploadDocumentRequest, options?: AxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).uploadDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
